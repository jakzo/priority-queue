{"version":3,"file":"codeshift.js.map","sources":["../src/main.js"],"sourcesContent":["/**\n * JavaScript implementation of a binary-heap priority queue.\n */\nexport default class PriorityQueue {\n  /**\n   * @param {?Function} compare Function used to compare the priority of two\n   *    items. It is passed two arguments and should return `true` if the first\n   *    item has a greater priority than the second, otherwise `false`.\n   */\n  constructor(compare = PriorityQueue.defaultCompare) {\n    this.compare = compare;\n    this.queue = [];\n    this.length = 0;\n  }\n\n  /**\n   * Pushes an element onto the queue.\n   * @param  {*} item Element to be pushed onto the queue.\n   * @return {number} The number of items on the queue after the push.\n   */\n  push(item) {\n    // Add the item at the bottom of the heap\n    this.length = this.queue.push(item);\n    // Bubble it up to its correct position (until it reaches a node with a\n    // greater priority or it becomes the root node)\n    let i = this.length - 1,\n        parent = i - 1 >> 1;\n    while (i > 0 && this.compare(item, this.queue[parent])) {\n      this.queue[i] = this.queue[parent];\n      this.queue[parent] = item;\n      i = parent;\n      parent = i - 1 >> 1;\n    }\n    return this.length;\n  }\n\n  /**\n   * Removes and returns the item with the highest priority.\n   * @return {*} The item with the highest priority in the queue.\n   */\n  pop() {\n    // Get the item with the highest priority (it will be at index 0)\n    const popped = this.queue[0];\n    // Rebalance the tree by putting the item with the lowest priority at the\n    // top then bubbling it down to its correct position\n    const item = this.queue.pop();\n    this.length = this.queue.length;\n    let i = 0,\n        ia = 1,\n        ib = 2;\n    while (ib < this.queue.length) {\n      // Swap the item with the child which has a higher priority\n      if (this.compare(this.queue[ia], this.queue[ib])) {\n        this.queue[i] = this.queue[ia];\n        i = ia;\n      } else {\n        this.queue[i] = this.queue[ib];\n        i = ib;\n      }\n      ia = (i * 2) + 1;\n      ib = (i * 2) + 2;\n    }\n    // If the final pair of children only contains one item, don't compare both\n    // children, but we do need to compare it with the item we are bubbling\n    // because it used to be the other item in this pair and may have been the\n    // item with the higher priority\n    if (this.length !== 0) {\n      if (ib === this.length && !this.compare(item, this.queue[ia])) {\n        this.queue[i] = this.queue[ia];\n        i = ia;\n      }\n      this.queue[i] = item;\n    }\n    return popped;\n  }\n\n  /**\n   * Returns the item with the highest priority without removing it.\n   * @return {*} The item with the highest priority in the queue.\n   */\n  peek() {\n    return this.queue[0];\n  }\n\n  /**\n   * Removes all elements from the queue.\n   * @return {void}\n   */\n  clear() {\n    this.queue = [];\n    this.length = 0;\n  }\n}\n\n/**\n * The comparison function which is used if no comparison function is passed\n * into the constructor. By default it evaluates `a < b`.\n * @type {Function}\n * @param {*} a First element to compare.\n * @param {*} b Second element to compare.\n * @return {boolean} `true` if `a < b`.\n */\nPriorityQueue.defaultCompare = (a, b) => a < b;\n"],"names":["this"],"mappings":"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"}