{"version":3,"file":"codeshift.js.map","sources":["../src/main.js"],"sourcesContent":["/**\r\n * JavaScript implementation of a binary-heap priority queue.\r\n */\r\nexport default class PriorityQueue extends Array {\r\n  /**\r\n   * @param {?Function} compare Function used to compare the priority of two\r\n   *    items. It is passed two arguments and should return `true` if the first\r\n   *    item has a greater priority than the second, otherwise `false`.\r\n   */\r\n  constructor(compare = PriorityQueue.defaultCompare) {\r\n    this.compare = compare;\r\n  }\r\n\r\n  /**\r\n   * Pushes an element onto the queue.\r\n   * @param  {*} item Element to be pushed onto the queue.\r\n   * @return {number} The number of items on the queue after the push.\r\n   */\r\n  push(item) {\r\n    const length = Array.prototype.push.call(this, item);\r\n    let i = length - 1,\r\n        parent = i - 1 >> 1;\r\n    while (i > 0 && this.compare(item, this[parent])) {\r\n      this[i] = this[parent];\r\n      this[parent] = item;\r\n      i = parent;\r\n      parent = i - 1 >> 1;\r\n    }\r\n    return length;\r\n  }\r\n\r\n  /**\r\n   * Removes and returns the item with the highest priority.\r\n   * @return {*} The item with the highest priority in the queue.\r\n   */\r\n  pop() {\r\n    const popped = this[0],\r\n          item = Array.prototype.pop.call(this);\r\n    let i = 0,\r\n        ia = 1,\r\n        ib = 2;\r\n    while (ia < this.length) {\r\n      if (ib == this.length || this.compare(this[ia], this[ib])) {\r\n        if (this.compare(item, this[ia])) break;\r\n        this[i] = this[ia];\r\n        i = ia;\r\n      } else {\r\n        if (this.compare(item, this[ib])) break;\r\n        this[i] = this[ib];\r\n        i = ib;\r\n      }\r\n      ia = i * 2 + 1;\r\n      ib = i * 2 + 2;\r\n    }\r\n    if (this.length != 0) this[i] = item;\r\n    return popped;\r\n  }\r\n}\r\n\r\n/**\r\n * The comparison function which is used if no comparison function is passed\r\n * into the constructor. By default, it just evaluates `a < b`.\r\n * @type {Function}\r\n */\r\nPriorityQueue.defaultCompare = (a, b) => a < b;\r\n"],"names":["const","let","this"],"mappings":";;;;;;AAAA;;;AAGA,IAAqB,aAAa;EAAe,sBAMpC,CAAC,OAAsC,EAAE;qCAAjC,GAAG,aAAa,CAAC,cAAc;;IAChD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;GACxB;;;;sDAAA;;;;;;;EAOD,wBAAA,IAAI,kBAAC,IAAI,EAAE;;;IACTA,IAAM,MAAM,GAAG,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACrDC,IAAI,CAAC,GAAG,MAAM,GAAG,CAAC;QACd,MAAM,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACxB,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE;MAChDC,MAAI,CAAC,CAAC,CAAC,GAAGA,MAAI,CAAC,MAAM,CAAC,CAAC;MACvBA,MAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;MACpB,CAAC,GAAG,MAAM,CAAC;MACX,MAAM,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;KACrB;IACD,OAAO,MAAM,CAAC;GACf,CAAA;;;;;;EAMD,wBAAA,GAAG,mBAAG;;;IACJF,IAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC;UAChB,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5CC,IAAI,CAAC,GAAG,CAAC;QACL,EAAE,GAAG,CAAC;QACN,EAAE,GAAG,CAAC,CAAC;IACX,OAAO,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE;MACvB,IAAI,EAAE,IAAIC,MAAI,CAAC,MAAM,IAAIA,MAAI,CAAC,OAAO,CAACA,MAAI,CAAC,EAAE,CAAC,EAAEA,MAAI,CAAC,EAAE,CAAC,CAAC,EAAE;QACzD,IAAIA,MAAI,CAAC,OAAO,CAAC,IAAI,EAAEA,MAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAA,MAAM,EAAA;QACxCA,MAAI,CAAC,CAAC,CAAC,GAAGA,MAAI,CAAC,EAAE,CAAC,CAAC;QACnB,CAAC,GAAG,EAAE,CAAC;OACR,MAAM;QACL,IAAIA,MAAI,CAAC,OAAO,CAAC,IAAI,EAAEA,MAAI,CAAC,EAAE,CAAC,CAAC,EAAE,EAAA,MAAM,EAAA;QACxCA,MAAI,CAAC,CAAC,CAAC,GAAGA,MAAI,CAAC,EAAE,CAAC,CAAC;QACnB,CAAC,GAAG,EAAE,CAAC;OACR;MACD,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;MACf,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;KAChB;IACD,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,EAAE,EAAA,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,EAAA;IACrC,OAAO,MAAM,CAAC;GACf,CAAA;;;EArDwC,KAsD1C;;;;;;;AAOD,aAAa,CAAC,cAAc,GAAG,UAAC,CAAC,EAAE,CAAC,EAAE,SAAG,CAAC,GAAG,CAAC,GAAA,CAAC;;;;"}